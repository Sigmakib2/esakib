-------| Binary Search |-------

#include <stdio.h>
int main()
{
    int i, low, high, mid, n, key, array[100];
    printf("Enter number of elements :");
    scanf("%d",&n);
    printf("Enter %d integers \n", n);
    for(i = 0; i < n; i++)
        scanf("%d",&array[i]);
    printf("Enter the value to find in the array:");
    scanf("%d", &key);
    low = 0;
    high = n - 1;
    mid = (low+high)/2;
    while (low <= high)
    {
        if(array[mid] < key)
            low = mid + 1;
        else if (array[mid] == key)
        {
            printf("%d found at location %d", key, mid+1);
            break;
        }
        else
            high = mid - 1;
        mid = (low + high)/2;
    }
    if(low > high)
        printf("Not found! %d isn't present in the list", key);
    return 0;
}

---------------| Quick Sort |---------------

#include<stdio.h>
void quicksort(int [10],int,int);

int main(){
  int x[20],size,i;

  printf("Enter size of the array: ");
  scanf("%d",&size);

  printf("Enter %d elements: \n",size);
  for(i=0;i<size;i++)
	scanf("%d",&x[i]);

  quicksort(x,0,size-1);

  printf("Sorted elements: ");
  for(i=0;i<size;i++)
	printf(" %d",x[i]);
  return 0;
}

void quicksort(int x[10],int first,int last){
	int pivot,j,temp,i;

	 if(first<last){
		 pivot=first;
		 i=first;
		 j=last;

		 while(i<j){
			 while(x[i]<=x[pivot]&&i<last)
				 i++;
			 while(x[j]>x[pivot])
				 j--;
			 if(i<j){
				 temp=x[i];
				  x[i]=x[j];
				  x[j]=temp;
			 }
		 }
		 temp=x[pivot];
		 x[pivot]=x[j];
		 x[j]=temp;
		 quicksort(x,first,j-1);
		 quicksort(x,j+1,last);

	}
}

-----------| Tower Of Hanoi |-------------

#include <stdio.h>
#include <conio.h>
void hanoi(char,char,char,int);
void main()
{
	int num;
	printf("ENTER NUMBER OF DISKS: ");
	scanf("%d",&num);
	printf("\nTOWER OF HANOI FOR %d NUMBER OF DISKS:\n", num);
	hanoi('A','B','C',num);
	getch();
}
void hanoi(char from,char to,char other,int n)
{
	if(n<=0)
		printf("\nILLEGAL NUMBER OF DISKS");
	if(n==1)
		printf("\nMOVE DISK FROM %c TO %c",from,other);
	if(n>1)
	{
		hanoi(from,other,to,n-1);
		hanoi(from,to,other,1);
		hanoi(to,from,other,n-1);
	}
}

----------| Stack |-------------

// Stack implementation in C

#include <stdio.h>
#include <stdlib.h>
#define MAX 10

int count = 0;

// Creating a stack
struct stack {
  int items[MAX];
  int top;
};
typedef struct stack st;

void createEmptyStack(st *s) {
  s->top = -1;
}

// Check if the stack is full
int isfull(st *s) {
  if (s->top == MAX - 1)
    return 1;
  else
    return 0;
}

// Check if the stack is empty
int isempty(st *s) {
  if (s->top == -1)
    return 1;
  else
    return 0;
}

// Add elements into stack
void push(st *s, int newitem) {
  if (isfull(s)) {
    printf("STACK FULL");
  } else {
    s->top++;
    s->items[s->top] = newitem;
  }
  count++;
}

// Remove element from stack
void pop(st *s) {
  if (isempty(s)) {
    printf("\n STACK EMPTY \n");
  } else {
    printf("Item popped= %d", s->items[s->top]);
    s->top--;
  }
  count--;
  printf("\n");
}

// Print elements of stack
void printStack(st *s) {
  printf("Stack: ");
  for (int i = 0; i < count; i++) {
    printf("%d ", s->items[i]);
  }
  printf("\n");
}

// Driver code
int main() {
  int ch;
  st *s = (st *)malloc(sizeof(st));

  createEmptyStack(s);

  push(s, 1);
  push(s, 2);
  push(s, 3);
  push(s, 0);
  push(s, 5);
  push(s, 7);

  printStack(s);

  pop(s);

  printf("\nAfter Popping Out\n");
  printStack(s);
}
